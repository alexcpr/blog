<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>News 'n' Updates | Alexandre's Blog</title>
  <link href="https://blog.alexandrecipor.com/feed.xml" rel="self"/>
  <link href="https://blog.alexandrecipor.com/"/>
  <updated>2018-09-08T15:16:29+02:00</updated>
  <id>https://blog.alexandrecipor.com/</id>
  <author>
    <name></name>
  </author>

  
  
  
  
  <entry>
    <title>Why is w3schools a bad information source?</title>
    <link href="https://blog.alexandrecipor.com/en/why-is-w3schools-bad"/>
    <updated>2018-08-29T00:00:00+02:00</updated>
    <id>https://blog.alexandrecipor.com/en/why-is-w3schools-bad</id>
    <content type="html">&lt;p&gt;As a developer, I‚Äôm using &lt;a href=&quot;https://discordapp.com/&quot;&gt;Discord&lt;/a&gt; every day to talk with people and friends about programming stuff, but I am mainly in programming Discord servers and I was, especially in a Discord server for a few days, which have ~25K members and I saw some people referring people to &lt;a href=&quot;https://www.w3schools.com/&quot;&gt;w3schools&lt;/a&gt;, which is a bad information source to learn programming. So, I decided, to alert a staff to do something about it, and the staff said that w3schools is sometimes outdated, but that it‚Äôs not a big problem. However, in fact, it is a big problem because as a starter when you learn something and do it all the time it‚Äôs hard to stop doing it even more if nobody alerts you about it. With everything we know about web development best practices, w3schools ability to remain that known, baffles us all.&lt;/p&gt;

&lt;p&gt;I‚Äôm not the first one saying that w3schools is bad and writing about it. &lt;a href=&quot;https://web.archive.org/web/20110412103745/http://w3fools.com&quot;&gt;This has already been done in the past&lt;/a&gt;, the problem is that now they say that w3schools resolved these issues, well, I will show you they didn‚Äôt resolve all of them.&lt;/p&gt;

&lt;h2 id=&quot;example-of-bad-practices-that-w3schools-makes-you-learn&quot;&gt;Example of bad practices that w3schools makes you learn&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;HTML
    &lt;ul&gt;
      &lt;li&gt;You probably won‚Äôt believe me, but yes w3schools recommend to people to use Notepad for Windows users and TextEdit for Mac users.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;¬´ Web pages can be created and modified by using professional HTML editors.&lt;/p&gt;

    &lt;p&gt;However, for learning HTML we recommend a simple text editor like Notepad (PC) or TextEdit (Mac).&lt;/p&gt;

    &lt;p&gt;We believe using a simple text editor is a good way to learn HTML.&lt;/p&gt;

    &lt;p&gt;Follow the four steps below to create your first web page with Notepad or TextEdit. ¬ª&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://www.w3schools.com/html/html_editors.asp&quot;&gt;See it by yourself&lt;/a&gt;
  &lt;em&gt;What does Linux users should use, though&lt;/em&gt; ü§î&lt;/p&gt;

    &lt;p&gt;I personally recommend &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt; or &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt; for simple code editor. For an IDE I recommend the &lt;a href=&quot;https://www.jetbrains.com/&quot;&gt;Jetbrains tools&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/html/html_formatting.asp&quot;&gt;HTML Formatting tutorial&lt;/a&gt; they recommend the use of &lt;code&gt;&amp;#x3C;b&amp;#x3E;&lt;/code&gt; tag, which is deprecated and should be replaced by CSS.&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/html/html_basic.asp&quot;&gt;HTML Basics tutorial&lt;/a&gt; they use &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes in a &lt;code&gt;&amp;#x3C;img&amp;#x3E;&lt;/code&gt; tag instead using CSS. Barely better &lt;a href=&quot;https://www.w3schools.com/html/html_images.asp&quot;&gt;here&lt;/a&gt; they inline style into the &lt;code&gt;&amp;#x3C;img&amp;#x3E;&lt;/code&gt; tag.&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/html/html_headings.asp&quot;&gt;HTML Headings tutorial&lt;/a&gt; they inline style in a &lt;code&gt;&amp;#x3C;h1&amp;#x3E;&lt;/code&gt; tag. Even in their &lt;a href=&quot;https://www.w3schools.com/html/html_styles.asp&quot;&gt;HTML Styles tutorial&lt;/a&gt; and &lt;a href=&quot;https://www.w3schools.com/html/html_css.asp&quot;&gt;HTML CSS tutorial&lt;/a&gt; they do so.&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/html/html_links.asp&quot;&gt;HTML Links tutorial&lt;/a&gt; showing how to change default &lt;code&gt;&amp;#x3C;a&amp;#x3E;&lt;/code&gt; colors they did this&lt;/li&gt;
    &lt;/ul&gt;
    &lt;pre&gt;&lt;code&gt;&amp;#x3C;style&amp;#x3E;
  a:link {
      color: green;
      background-color: transparent;
      text-decoration: none;
  }
  a:visited {
      color: pink;
      background-color: transparent;
      text-decoration: none;
  }
  a:hover {
      color: red;
      background-color: transparent;
      text-decoration: underline;
  }
  a:active {
      color: yellow;
      background-color: transparent;
      text-decoration: underline;
  }
&amp;#x3C;/style&amp;#x3E;
  &lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;em&gt;Note that this time they used a &lt;code&gt;&amp;#x3C;style&amp;#x3E;&lt;/code&gt; tag!&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;Although they could have just done it like this&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;&amp;#x3C;style&amp;#x3E;
  a {
      text-decoration: none;
      background-color: transparent
  }
  a:link {
      color: green
  }
  a:visited {
      color: pink
  }
  a:active,
  a:hover {
      color: red;
      text-decoration: underline
  }
  a:active {
      color: #ff0
  }
&amp;#x3C;/style&amp;#x3E;
  &lt;/code&gt;&lt;/pre&gt;
    &lt;ul&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/html/html_layout.asp&quot;&gt;HTML Layout tutorial&lt;/a&gt; they recommend &lt;code&gt;float&lt;/code&gt; over &lt;code&gt;flex&lt;/code&gt; and doesn‚Äôt even talk about &lt;code&gt;grid&lt;/code&gt; and as an excuse they talk about &lt;code&gt;flex&lt;/code&gt; not being supported by IE10 and lower.
  &lt;img src=&quot;/images/ie11-desktop.png&quot; alt=&quot;&quot; /&gt;
  &lt;img src=&quot;/images/ie11-mobile.png&quot; alt=&quot;&quot; /&gt;
  IE 11 Desktop works fine, but mobile doesn‚Äôt. Flex works partially on IE 11 as &lt;a href=&quot;https://caniuse.com/#search=flex&quot;&gt;caniuse says&lt;/a&gt;. However, it‚Äôs not a real problem since IE only represents ~2% of browsers usage.&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/html/html_responsive.asp&quot;&gt;HTML Responsive tutorial&lt;/a&gt; they use &lt;code&gt;&amp;#x3C;media&amp;#x3E;&lt;/code&gt; attribute to show different content depending on browser width, don‚Äôt do that. Use media queries in a separate CSS file.&lt;/li&gt;
      &lt;li&gt;They have a &lt;a href=&quot;https://www.w3schools.com/html/html_xhtml.asp&quot;&gt;tutorial about XHTML&lt;/a&gt;, which is dead since HTML5.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CSS
    &lt;ul&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/css/css3_mediaqueries.asp&quot;&gt;CSS Media Queries tutorial&lt;/a&gt; they use &lt;code&gt;&amp;#x3C;media&amp;#x3E;&lt;/code&gt; attribute to show different content depending on browser width, don‚Äôt do that. Use media queries in a separate CSS file.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JavaScript
    &lt;ul&gt;
      &lt;li&gt;In all their tutorials, including their &lt;a href=&quot;https://www.w3schools.com/js/js_variables.asp&quot;&gt;JavaScript Variables tutorial&lt;/a&gt; and ‚Äú&lt;a href=&quot;https://www.w3schools.com/js/js_best_practices.asp&quot;&gt;JavaScript Best Practices&lt;/a&gt;‚Äù they are using &lt;code&gt;var&lt;/code&gt; although nowadays you should be using &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;. In ES2015 &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; have been added, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; is supported by IE11 (IE11 represents almost 100% of current IE usage). And you can write in ES2015 and convert your code to ES5 with tools such as &lt;a href=&quot;https://babeljs.io/&quot;&gt;babel&lt;/a&gt;. &lt;em&gt;And to be honest, nowadays you can dev in ES2015, since IE only represents ~2% of browsers usage.&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;In all their tutorials, they do string concatenation although they could do string interpolation, which is very easy using template literals.&lt;/li&gt;
      &lt;li&gt;In all their tutorials where they compare variables, they use &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; instead of using &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;In all their tutorials they mostly show traditional functions instead of arrow functions, even when it makes more sense.&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/js/tryit.asp?filename=tryjs_intro_lightbulb&quot;&gt;JavaScript introduction&lt;/a&gt; they show how JavaScript can modify HTML attribute values. The problem is that they inline the JavaScript inside an &lt;code&gt;onclick&lt;/code&gt; attribut, which is a bad practice because it‚Äôs not very readable and it‚Äôs at the same level as inline css, they should have used a &lt;code&gt;&amp;#x3C;script&amp;#x3E;&lt;/code&gt; tag.&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/js/js_whereto.asp&quot;&gt;JavaScript Where To tutorial&lt;/a&gt; they don‚Äôt mention that when placing JavaScript code in the &lt;code&gt;&amp;#x3C;head&amp;#x3E;&lt;/code&gt; you must be using &lt;code&gt;defer&lt;/code&gt; or &lt;code&gt;async&lt;/code&gt; attribute.&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/js/js_output.asp&quot;&gt;JavaScript Output tutorial&lt;/a&gt; even though they warned that &lt;code&gt;document.write&lt;/code&gt; should be used for debugging only, but honestly it shouldn‚Äôt even be mentioned.&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/js/js_variables.asp&quot;&gt;JavaScript Variables tutorial&lt;/a&gt; there are several examples of reporting several variables on the same line, without assignment.&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/js/js_operators.asp&quot;&gt;JavaScript Operators tutorial&lt;/a&gt; they don‚Äôt mention the &lt;code&gt;**&lt;/code&gt; operator.&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/js/js_datatypes.asp&quot;&gt;JavaScript Data Types tutorial&lt;/a&gt; they say, ‚ÄúYou can consider it a bug in JavaScript that typeof null is an object. It should be null.‚Äù It was a bug in the beginning, but this text could make think, wrongly that this behavior will change one day.&lt;/li&gt;
      &lt;li&gt;No tutorial/documentation about the modern &lt;code&gt;fetch&lt;/code&gt; API only about &lt;a href=&quot;https://www.w3schools.com/js/js_ajax_intro.asp&quot;&gt;XMLHttpRequest&lt;/a&gt;. &lt;em&gt;&lt;a href=&quot;https://blog.alexandrecipor.com/en/fetch-api&quot;&gt;See why you should be using fetch and not XMLHttp&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/js/js_objects.asp&quot;&gt;JavaScript Objects tutorial&lt;/a&gt; they could have used short syntax for object methods like this&lt;/li&gt;
    &lt;/ul&gt;
    &lt;pre&gt;&lt;code class=&quot;json&quot;&gt;{
  firstName: &amp;#x22;John&amp;#x22;,
  lastName : &amp;#x22;Doe&amp;#x22;,
  id       : 1,
  method() {
      // code of the method here
  }
}&lt;/code&gt;&lt;/pre&gt;
    &lt;ul&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/js/js_events.asp&quot;&gt;JavaScript Events tutorial&lt;/a&gt; they teach a bad practice of using html events instead using JavaScript events with the &lt;code&gt;addEventListener&lt;/code&gt; method.&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/js/js_arrays.asp&quot;&gt;JavaScript Arrays tutorial&lt;/a&gt; they could have taught for of to iterate over array like this &lt;code&gt;for (const element of array) { ... }&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/js/js_hoisting.asp&quot;&gt;JavaScript Hoisting tutorial&lt;/a&gt; it would be much easier using &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/js/js_best_practices.asp&quot;&gt;JavaScript Best Practices tutorial&lt;/a&gt; declarations on top is now bad practice, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; should be used instead. Use Parameter Defaults is now part of the syntax.&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/js/js_validation.asp&quot;&gt;JavaScript Validation tutorial&lt;/a&gt; &lt;code&gt;addEventListener&lt;/code&gt; should be used, again.&lt;/li&gt;
      &lt;li&gt;JavaScript Classes aren‚Äôt mentioned.&lt;/li&gt;
      &lt;li&gt;JavaScript Promises aren‚Äôt mentioned.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PHP
    &lt;ul&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/php/default.asp&quot;&gt;PHP Introduction&lt;/a&gt; PHP5 is enough to show how outdated the tutorial is.&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/php/php_install.asp&quot;&gt;PHP Installation tutorial&lt;/a&gt; PHP5 still and there is no real explanation on how to install PHP, it‚Äôs like saying ‚ÄúLook at the doc and deal with it, we won‚Äôt tell you about php -S (php internal web server for development)‚Äù&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/php/php_variables.asp&quot;&gt;PHP Variables tutorial&lt;/a&gt; they use &lt;code&gt;&quot;&lt;/code&gt; by default instead of &lt;code&gt;'&lt;/code&gt; even without interpolation. They use global variables, which is a bad practice as well.&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/php/php_arrays.asp&quot;&gt;PHP Arrays tutorial&lt;/a&gt; they use the old long syntax &lt;code&gt;array()&lt;/code&gt; although they should use the short syntax &lt;code&gt;[]&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/php/php_ajax_intro.asp&quot;&gt;PHP Ajax tutorial&lt;/a&gt; their JavaScript and PHP codes are full of bad practices, and they don‚Äôt even talk about the fact that nowadays you should use the &lt;code&gt;fetch&lt;/code&gt; API instead AJAX. &lt;em&gt;&lt;a href=&quot;https://blog.alexandrecipor.com/en/fetch-api&quot;&gt;See why you should be using fetch and not XMLHttp&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;No tutorial about hashing passwords.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bootstrap
    &lt;ul&gt;
      &lt;li&gt;In their &lt;a href=&quot;https://www.w3schools.com/bootstrap/default.asp&quot;&gt;Bootstrap Introduction&lt;/a&gt; they use Bootstrap 3, no needs to go further.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;W3.JS
    &lt;ul&gt;
      &lt;li&gt;Their &lt;a href=&quot;https://www.w3schools.com/w3js/default.asp&quot;&gt;W3.JS&lt;/a&gt; library is heavy (12Ko) and doesn‚Äôt do a lot of things. W3.JS is like jQuery, heavy and useless nowadays, that‚Äôs why I don‚Äôt recommend using those two libraries. In 2018, a library that allows to directly interact with the DOM is fairly anti-pattern now that UX library like React or VueJS exist.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-is-even-w3schools-site-itself-bad-&quot;&gt;Why is even w3schools site itself bad ?&lt;/h2&gt;

&lt;p&gt;For this part I recommend you that you read &lt;a href=&quot;https://www.impressivewebs.com/w3schools-ugly-bad-good/&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;fun-fact&quot;&gt;Fun Fact&lt;/h2&gt;

&lt;p&gt;I was looking at the &lt;a href=&quot;http://w3schools.invisionzone.com/&quot;&gt;w3schools forum&lt;/a&gt; and I found this &lt;a href=&quot;http://w3schools.invisionzone.com/topic/57507-cloned-domain-from-w3schools/&quot;&gt;thread&lt;/a&gt; saying that someone cloned w3schools site. The cloned version is available &lt;a href=&quot;https://www.quanzhanketang.com/&quot;&gt;here&lt;/a&gt; this is an outdated version of w3schools site, so you can explore the even more outdated tutorials, you can also see this meme by yourself&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/w3fools.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;They was using HTML tables for layout and by the way this is not a lamp üòÇ
And I‚Äôm sure you can still find some funny things they were doing a few years ago.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; If I forgot something, you can &lt;a href=&quot;https://help.github.com/articles/creating-an-issue/&quot;&gt;open an issue&lt;/a&gt; on the &lt;a href=&quot;https://github.com/binksAlexandre/binksAlexandre.github.io&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; w3schools ‚Üíüóë, use &lt;a href=&quot;https://developer.mozilla.org/en-US/&quot;&gt;the MDN&lt;/a&gt; instead üï∂&lt;/p&gt;
</content>
  </entry>
  
  
  
  
  
  <entry>
    <title>Stop using XMLHttpRequest and switch to fetch</title>
    <link href="https://blog.alexandrecipor.com/en/fetch-api"/>
    <updated>2018-08-10T00:00:00+02:00</updated>
    <id>https://blog.alexandrecipor.com/en/fetch-api</id>
    <content type="html">&lt;p&gt;The most popular XHR API is &lt;code&gt;XMLHttpRequest&lt;/code&gt; which wasn‚Äôt really made for what we‚Äôve been using it for. That‚Äôs why &lt;code&gt;fetch&lt;/code&gt; API has been created, the &lt;code&gt;fetch&lt;/code&gt; API is in some sort a modern replacement for &lt;code&gt;XMLHttpRequest&lt;/code&gt;. Let‚Äôs have a basic look at this &lt;code&gt;window.fetch&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&quot;browser-compatibility&quot;&gt;Browser compatibility&lt;/h2&gt;

&lt;p&gt;An important thing while developing a web application is the browser compatibility with the technologies used. As &lt;code&gt;XMLHttpRequest&lt;/code&gt; is older it logically have a better compatibility with older browsers compared to &lt;code&gt;fetch&lt;/code&gt; however, there is well done &lt;code&gt;fetch&lt;/code&gt; polyfill‚Äôs which makes this modern API compatible with older browsers such as IE, etc‚Ä¶&lt;/p&gt;

&lt;p&gt;(c.f &lt;a href=&quot;https://caniuse.com/#search=XMLHttpRequest&quot;&gt;XMLHttpRequest Compatibility&lt;/a&gt;, &lt;a href=&quot;https://caniuse.com/#search=Fetch&quot;&gt;Fetch Compatibility&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;basic-xmlhttprequest-usage&quot;&gt;Basic &lt;code&gt;XMLHttpRequest&lt;/code&gt; Usage&lt;/h2&gt;

&lt;p&gt;XHR is a bit overcomplicated in my opinion and I still don‚Äôt understand why &lt;code&gt;XML&lt;/code&gt; is uppercase while &lt;code&gt;Http&lt;/code&gt; is camel-cased, it doesn‚Äôt make any sense at all. Anyways, here‚Äôs a common XHR usage&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;if (window.XMLHttpRequest) { // Mozilla, Safari, etc...
    request = new XMLHttpRequest();
} else if (window.ActiveXObject) { // IE
    try {
        request = new ActiveXObject(&amp;#x27;Msxml2.XMLHTTP&amp;#x27;);
    } 
    catch (e) {
        try {
            request = new ActiveXObject(&amp;#x27;Microsoft.XMLHTTP&amp;#x27;);
        } 
        catch (e) {}
    }
}

// Open the request and send it.
request.open(&amp;#x27;GET&amp;#x27;, &amp;#x27;https://example.com/api&amp;#x27;, true);
request.send(null);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course JavaScript frameworks make XHR more pleasant to work with, but what you see above is a ‚Äú&lt;strong&gt;simple&lt;/strong&gt;‚Äù example of the most basic XHR usage. XHR is a real mess.&lt;/p&gt;

&lt;h2 id=&quot;basic-fetch-usage&quot;&gt;Basic &lt;code&gt;fetch&lt;/code&gt; Usage&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;fetch&lt;/code&gt; function is provided in the global &lt;code&gt;window&lt;/code&gt; scope, with the first argument being the URL (required) and the second the options (optional)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;// fetch(url, options) | url: required - options: optional
fetch(&amp;#x27;https://example.com/api&amp;#x27;, {
    method: &amp;#x27;get&amp;#x27;
}).then(function(response) {
    // Success :)
}).catch(function(err) {
    // Error :(
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And as you can see &lt;code&gt;fetch&lt;/code&gt; uses &lt;strong&gt;Javascript Promises&lt;/strong&gt; in order to handle results/callbacks. If you aren‚Äôt used to &lt;strong&gt;Javascript Promises&lt;/strong&gt; yet, get used to it ‚Äì it will soon be everywhere.&lt;/p&gt;

&lt;h2 id=&quot;request-headers&quot;&gt;Request Headers&lt;/h2&gt;

&lt;p&gt;The ability to set request headers is important in request flexibility, you can work with request headers by executing &lt;code&gt;new Headers()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;// Create an empty Headers instance
const headers = new Headers();

// Add headers
headers.append(&amp;#x27;Custom-Header&amp;#x27;, &amp;#x27;MySuperValue&amp;#x27;);
headers.append(&amp;#x27;Content-Type&amp;#x27;, &amp;#x27;text/html&amp;#x27;);

// Check if this header is present
headers.has(&amp;#x27;Content-Type&amp;#x27;); // true
headers.has(&amp;#x27;Some-Header&amp;#x27;); // false

// Get the value of a specific header
headers.get(&amp;#x27;Custom-Header&amp;#x27;); // MySuperValue

// Set a new value for an existing header
headers.set(&amp;#x27;Content-Type&amp;#x27;, &amp;#x27;text/plain&amp;#x27;);

// Delete a header
headers.delete(&amp;#x27;Custom-Header&amp;#x27;);

// Add initial values
const headers = new Headers({
    &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json&amp;#x27;,
    &amp;#x27;User-Agent&amp;#x27;: &amp;#x27;MySuperUserAgent&amp;#x27;
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to use request headers, you must first create a new &lt;code&gt;Request&lt;/code&gt; instance&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;const request = new Request(&amp;#x27;https://example.com/api&amp;#x27;, {
    headers: new Headers({
        &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json&amp;#x27;,
        &amp;#x27;User-Agent&amp;#x27;: &amp;#x27;MyCustomUserAgent&amp;#x27;
    })
});

fetch(request).then(function(response) {
    // process the response
}).catch(function(error) {
    // process the error
});&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;request&quot;&gt;Request&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;Request&lt;/code&gt; instance represents the request piece of a &lt;code&gt;fetch&lt;/code&gt; call. By passing &lt;code&gt;fetch&lt;/code&gt; a &lt;code&gt;Request&lt;/code&gt; you can make advanced and customized requests:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;method&lt;/code&gt; - &lt;strong&gt;GET&lt;/strong&gt;, &lt;strong&gt;HEAD&lt;/strong&gt;, &lt;strong&gt;POST&lt;/strong&gt;, &lt;strong&gt;PUT&lt;/strong&gt;, &lt;strong&gt;DELETE&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;url&lt;/code&gt; - &lt;strong&gt;URL&lt;/strong&gt; of the request&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;headers&lt;/code&gt; - associated &lt;strong&gt;Headers&lt;/strong&gt; object&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;referrer&lt;/code&gt; - referrer of the request&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;mode&lt;/code&gt; - &lt;strong&gt;cors&lt;/strong&gt;, &lt;strong&gt;no-cors&lt;/strong&gt;, &lt;strong&gt;same-origin&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;credentials&lt;/code&gt; - should cookies go with the request? &lt;strong&gt;omit&lt;/strong&gt;, &lt;strong&gt;same-origin&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;redirect&lt;/code&gt; - &lt;strong&gt;follow&lt;/strong&gt;, &lt;strong&gt;error&lt;/strong&gt;, &lt;strong&gt;manual&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;integrity&lt;/code&gt; - subresource integrity value&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;cache&lt;/code&gt; - cache mode (&lt;strong&gt;default&lt;/strong&gt;, &lt;strong&gt;reload&lt;/strong&gt;, &lt;strong&gt;no-cache&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here‚Äôs a sample of &lt;code&gt;Request&lt;/code&gt; usage&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;// Build the request
const request = new Request(&amp;#x27;https://example.com/anything&amp;#x27;, {
    method: &amp;#x27;HEAD&amp;#x27;, 
    mode: &amp;#x27;no-cors&amp;#x27;, 
    redirect: &amp;#x27;follow&amp;#x27;,
    headers: new Headers({
        &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;text/html&amp;#x27;
    })
});

// And now use the request
fetch(request).then(function() {
    // handle response 
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only the first parameter, the URL, is required. Each property becomes read only once the &lt;code&gt;Request&lt;/code&gt; instance has been created. Also important to note that &lt;code&gt;Request&lt;/code&gt; has a clone method which is important when using &lt;code&gt;fetch&lt;/code&gt; within the Service Worker API ‚Äì a &lt;code&gt;Request&lt;/code&gt; is a stream and thus must be cloned when passing to another &lt;code&gt;fetch&lt;/code&gt; call.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;fetch(&amp;#x27;https://example.com/anything&amp;#x27;, {
    method: &amp;#x27;HEAD&amp;#x27;, 
    mode: &amp;#x27;no-cors&amp;#x27;, 
    redirect: &amp;#x27;follow&amp;#x27;,
    headers: new Headers({
        &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;text/html&amp;#x27;
    })
}).then(function() {
    // handle response 
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You‚Äôll likely only use Request instances within Service Workers since the Request and fetch signatures can be the same.&lt;/p&gt;

&lt;h2 id=&quot;response&quot;&gt;Response&lt;/h2&gt;

&lt;p&gt;The fetch‚Äôs then method is provided a Response instance but you can also manually create Response objects yourself ‚Äì another situation you may encounter when using service workers. With a Response you can configure:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;type&lt;/code&gt; - &lt;strong&gt;basic&lt;/strong&gt;, &lt;strong&gt;cors&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;url&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;useFinalURL&lt;/code&gt; - Boolean for if &lt;strong&gt;url&lt;/strong&gt; is the final URL&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;status&lt;/code&gt; - status code (ex: &lt;strong&gt;200&lt;/strong&gt;, &lt;strong&gt;404&lt;/strong&gt;, etc.)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ok&lt;/code&gt; - Boolean for successful response (status in the range 200-299)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;statusText&lt;/code&gt; - status code (ex: &lt;strong&gt;OK&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;headers&lt;/code&gt; - Headers object associated with the response.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;// Fake response for service worker testing -- new Response(body, options)
const response = new Response(&amp;#x27;response body&amp;#x27;, {
    ok: false,
    status: 404,
    url: &amp;#x27;/&amp;#x27;
});

// The fetch&amp;#x27;s then gets a Response instance back
fetch(&amp;#x27;https://exemple.com/&amp;#x27;).then(function(response) {
    console.log(&amp;#x27;ok: &amp;#x27;, response.ok); // false
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Response&lt;/code&gt; also provides the following methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;clone()&lt;/code&gt; Creates a clone of a Response object&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;error()&lt;/code&gt; Returns a new Response object associated with a network error&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;redirect()&lt;/code&gt; Creates a new response with a different URL&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;arrayBuffer()&lt;/code&gt; Returns a promise that resolves with an ArrayBuffer&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;blob()&lt;/code&gt; Returns a promise that resolves with a Blob&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;formData()&lt;/code&gt; Returns a promise that resolves with a FormData object&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;json()&lt;/code&gt; Returns a promise that resolves with a JSON object&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;text()&lt;/code&gt; Returns a promise that resolves with a USVString (text)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;handling-json&quot;&gt;Handling JSON&lt;/h2&gt;

&lt;p&gt;Let‚Äôs say you make a request for JSON, the resulting callback data has a json method for converting the raw data to a JavaScript object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;fetch(&amp;#x27;https://example.com/api/list.json&amp;#x27;).then(function(response) { 
    // Convert to JSON
    return response.json();
}).then(function(jsObj) {
    // jsObj is an javascript object from the json response
    console.log(jsObj); 
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;json()&lt;/code&gt; method is a simple shortcut to &lt;code&gt;JSON.parse(jsonString)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;handling-basic-texthtml-responses&quot;&gt;Handling Basic Text/HTML Responses&lt;/h2&gt;

&lt;p&gt;JSON isn‚Äôt always the desired request response format so here‚Äôs how you can work with an HTML or text response&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;fetch(&amp;#x27;/404&amp;#x27;).then(function(response) {
    return response.text();
}).then(function(htmlresponse) { 
    // &amp;#x3C;!DOCTYPE ....
    console.log(htmlresponse); 
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can get the response text via chaining the Promise‚Äôs &lt;code&gt;then&lt;/code&gt; method along with the &lt;code&gt;text()&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&quot;handling-blob-responses&quot;&gt;Handling Blob Responses&lt;/h2&gt;

&lt;p&gt;For example, loading image via fetch its a bit different&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;fetch(&amp;#x27;https://example.com/someimage.jpg&amp;#x27;).then(function(response) {
    return response.blob();
})
.then(function(imageBlob) {
    document.querySelector(&amp;#x27;img&amp;#x27;).src = URL.createObjectURL(imageBlob);
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;blob()&lt;/code&gt; method of the Body mixing takes a Response stream and reads it to completion.&lt;/p&gt;

&lt;h2 id=&quot;posting-form-data&quot;&gt;Posting Form Data&lt;/h2&gt;

&lt;p&gt;AJAX is used a lot for sending form data, here‚Äôs how you would do it with the use of fetch&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;fetch(&amp;#x27;https://example.com/submit&amp;#x27;, {
    method: &amp;#x27;post&amp;#x27;,
    body: new FormData(document.getElementById(&amp;#x27;myForm&amp;#x27;))
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you want to post some JSON data&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;fetch(&amp;#x27;https://example.com/submit&amp;#x27;, {
    method: &amp;#x27;post&amp;#x27;,
    body: JSON.stringify({
        some: document.querySelector(&amp;#x27;#some&amp;#x27;).value,
        json: document.querySelector(&amp;#x27;#json&amp;#x27;).value,
        data: document.querySelector(&amp;#x27;#data&amp;#x27;).value
    })
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple as that!&lt;/p&gt;

&lt;h2 id=&quot;polyfill&quot;&gt;Polyfill&lt;/h2&gt;

&lt;p&gt;There is a lot of Polyfill‚Äôs for fetch method, but I highly suggest you to check the &lt;a href=&quot;https://github.com/github/fetch&quot;&gt;GitHub&lt;/a&gt; one.&lt;/p&gt;
</content>
  </entry>
  
  
  
  
  
  
  
  
  
  
  
  <entry>
    <title>Page load time counter in JS</title>
    <link href="https://blog.alexandrecipor.com/en/page-load-time-counter"/>
    <updated>2018-08-07T00:00:00+02:00</updated>
    <id>https://blog.alexandrecipor.com/en/page-load-time-counter</id>
    <content type="html">&lt;p&gt;What I would like to see on websites is a little counter of the page load time placed in the footer, so I decided to share you the little piece of code in order to easily integrate this counter in your website footer.&lt;/p&gt;

&lt;p&gt;ES5 Version (Older browsers)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;(function () {
    var time = window.performance &amp;#x26;&amp;#x26; performance.timing;
    if (time) {
        var load = (time.loadEventEnd - time.navigationStart) / 1e3;
        alert(&amp;#x22;This page loaded in &amp;#x22; + load + &amp;#x22; seconds&amp;#x22;);
    }
})();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ES6 Version (Modern browsers)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;(() =&amp;#x3E; {
    const time = window.performance &amp;#x26;&amp;#x26; performance.timing;
    if (time) {
        const load = (time.loadEventEnd - time.navigationStart) / 1e3;
        alert(&amp;#x60;This page loaded in ${load} seconds&amp;#x60;)
    }
})();&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  
  
  <entry>
    <title>How to make a Google button with CSS</title>
    <link href="https://blog.alexandrecipor.com/en/how-to-make-a-google-button"/>
    <updated>2018-08-07T00:00:00+02:00</updated>
    <id>https://blog.alexandrecipor.com/en/how-to-make-a-google-button</id>
    <content type="html">&lt;p&gt;I personally like the google buttons design, they are simple, lightweight and modern at the same time. So I decided to reproduce the google buttons design myself with some CSS.&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;

&lt;style&gt;.button{display:inline-block;background-image:-moz-linear-gradient(top,#f5f5f5,#f1f1f1);-moz-border-radius:2px;-moz-user-select:none;background-color:#f2f2f2;color:#757575;width:152px;font-family:arial,sans-serif;font-size:13px;border:1px solid #f2f2f2;border-radius:2px;cursor:default;font-weight:700;text-align:center;line-height:27px;min-width:54px;padding:0 16px;text-decoration:none}.button:hover{background-color:#f8f8f8;background-image:linear-gradient(top,#f8f8f8,#f1f1f1);border:1px solid #c6c6c6;color:#333;box-shadow:0 1px 1px rgba(0,0,0,.1)}.button.default:active{box-shadow:inset 0 1px 2px rgba(0,0,0,.1);color:#000}&lt;/style&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;google button&quot;&gt;Google Search&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;google-button-source-code&quot;&gt;Google button Source Code&lt;/h2&gt;

&lt;p&gt;HTML&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;#x3C;a href=&amp;#x22;#&amp;#x22; class=&amp;#x22;google button&amp;#x22;&amp;#x3E;Google Search&amp;#x3C;/a&amp;#x3E;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS (775 bytes uncompressed)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;.button {
	display: inline-block;
	background-image: -moz-linear-gradient(top, #f5f5f5, #f1f1f1);
	-moz-border-radius: 2px;
	-moz-user-select: none;
	background-color: #f2f2f2;
	color: #757575;
	width: 152px;
	font-family: arial, sans-serif;
	font-size: 13px;
	border: 1px solid #f2f2f2;
	border-radius: 2px;
	cursor: default;
	font-weight: 700;
	text-align: center;
	line-height: 27px;
	min-width: 54px;
	padding: 0 16px;
	text-decoration: none
}
.button:hover {
	background-color: #f8f8f8;
	background-image: linear-gradient(top, #f8f8f8, #f1f1f1);
	border: 1px solid #c6c6c6;
	color: #333;
	box-shadow: 0 1px 1px rgba(0, 0, 0, .1)
}
.button.default:active {
	box-shadow: inset 0 1px 2px rgba(0, 0, 0, .1);
	color: #000
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that‚Äôs it!&lt;/p&gt;
</content>
  </entry>
  
  
</feed>